variables:
  DOCKER_DRIVER: overlay2
  GIT_STRATEGY: clone
  GIT_SUBMODULE_STRATEGY: recursive
  TRACY_NO_INVARIANT_CHECK: 1

stages:
  - build
  - test
  - coverage
  - deploy

cache:
  paths:
    - ccache/


#
# ╺┳╸┏━╸┏━┓╺┳╸┏━┓
#  ┃ ┣╸ ┗━┓ ┃ ┗━┓
#  ╹ ┗━╸┗━┛ ╹ ┗━┛
#
before_script:
  - apt update -qq
  - DEBIAN_FRONTEND=noninteractive apt install -y --no-install-recommends ca-certificates
    ccache wget curl build-essential git-core libjsoncpp-dev zip cmake automake libtool
    libxcb-shm0-dev libxrandr-dev libxi-dev libgsl0-dev libatlas3-base libgphoto2-dev
    libxinerama-dev libxcursor-dev python3-dev portaudio19-dev yasm libgl1-mesa-dev
    libopencv-dev libx264-dev libx265-dev software-properties-common uuid-dev

  # CCache stuff
  - mkdir -p ccache
  - export CCACHE_BASEDIR=${PWD}
  - export CCACHE_DIR=${PWD}/ccache
  - export PATH="/usr/lib/ccache:${PATH}"

test:22.04:gcc-bundled-libs:
  stage: test
  image: ubuntu:22.04
  script: 
    # Prepare bundled dependencies
    - ./make_deps.sh

    # Test using bundled libs
    - rm -rf build && mkdir build
    - cmake -B build -DBUILD_GENERIC_ARCH=ON -DPROFILE=ON -DCMAKE_INSTALL_PREFIX=/usr
    - make -sC build -j$(nproc)
    - make check -sC build
    - ./build/src/splash --child --prefix unittest &
    - ./build/src/splash --doNotSpawn --prefix unittest ./data/share/splash/splash.json
  except:
    - /^debian.*$/

test:22.04:clang-bundled-libs:
  stage: test
  image: ubuntu:22.04
  script: 
    # Prepare bundled dependencies
    - ./make_deps.sh

    # Test using Clang
    - DEBIAN_FRONTEND=noninteractive apt install -y --no-install-recommends clang
    - rm -rf build && mkdir build
    - CC=clang CXX=clang++ cmake -B build -DBUILD_GENERIC_ARCH=ON -DPROFILE=ON -DCMAKE_INSTALL_PREFIX=/usr
    - make -sC build -j$(nproc)
    - make check -sC build
    - ./build/src/splash --child --prefix unittest &
    - ./build/src/splash --doNotSpawn --prefix unittest ./data/share/splash/splash.json
  except:
    - /^debian.*$/

test:22.04:gcc-system-libs:
  stage: test
  image: ubuntu:22.04
  script: 
    # Test using system libs
    - DEBIAN_FRONTEND=noninteractive apt install -y --no-install-recommends libglfw3-dev libglm-dev
      libavcodec-dev libavformat-dev libavutil-dev libswscale-dev libsnappy-dev libzmq3-dev
    - rm -rf build && mkdir build
    - cmake -B build -DBUILD_GENERIC_ARCH=ON -DPROFILE=ON -DCMAKE_INSTALL_PREFIX=/usr -DUSE_SYSTEM_LIBS=ON
    - make -sC build -j$(nproc)
    - make check -sC build
    - ./build/src/splash --child --prefix unittest &
    - ./build/src/splash --doNotSpawn --prefix unittest ./data/share/splash/splash.json
  except:
    - website
    - /^debian.*$/

test:23.10:gcc-bundled-libs:
  stage: test
  image: ubuntu:23.10
  script: 
    # Prepare bundled dependencies
    - ./make_deps.sh

    # Test using bundled libs
    - rm -rf build && mkdir build
    - cmake -B build -DBUILD_GENERIC_ARCH=ON -DPROFILE=ON -DCMAKE_INSTALL_PREFIX=/usr
    - make -sC build -j$(nproc)
    - make check -sC build
    - ./build/src/splash --child --prefix unittest &
    - ./build/src/splash --doNotSpawn --prefix unittest ./data/share/splash/splash.json
  except:
    - /^debian.*$/

test:23.10:clang-bundled-libs:
  stage: test
  image: ubuntu:23.10
  script: 
    # Prepare bundled dependencies
    - ./make_deps.sh

    # Test using Clang
    - DEBIAN_FRONTEND=noninteractive apt install -y --no-install-recommends clang
    - rm -rf build && mkdir build
    - CC=clang CXX=clang++ cmake -B build -DBUILD_GENERIC_ARCH=ON -DPROFILE=ON -DCMAKE_INSTALL_PREFIX=/usr
    - make -sC build -j$(nproc)
    - make check -sC build
    - ./build/src/splash --child --prefix unittest &
    - ./build/src/splash --doNotSpawn --prefix unittest ./data/share/splash/splash.json
  except:
    - /^debian.*$/

test:23.10:gcc-system-libs:
  stage: test
  image: ubuntu:23.10
  script: 
    # Test using system libs
    - DEBIAN_FRONTEND=noninteractive apt install -y --no-install-recommends libglfw3-dev libglm-dev
      libavcodec-dev libavformat-dev libavutil-dev libswscale-dev libsnappy-dev libzmq3-dev
    - rm -rf build && mkdir build
    - cmake -B build -DBUILD_GENERIC_ARCH=ON -DPROFILE=ON -DCMAKE_INSTALL_PREFIX=/usr -DUSE_SYSTEM_LIBS=ON
    - make -sC build -j$(nproc)
    - make check -sC build
    - ./build/src/splash --child --prefix unittest &
    - ./build/src/splash --doNotSpawn --prefix unittest ./data/share/splash/splash.json
  except:
    - website
    - /^debian.*$/

test:archlinux:
  stage: test
  image: archlinux:latest
  allow_failure: true
  before_script:
    - pacman -Syyu --noconfirm --disable-download-timeout
    - pacman -Sy --noconfirm --disable-download-timeout git cmake make gcc yasm ccache pkgconfig libxi libxinerama libxrandr
      libxcursor jsoncpp mesa gsl libgphoto2 python3 portaudio zip zlib x264 x265 opencv qt5-base vtk
      hdf5 glew fmt openmpi
    - mkdir -p ccache
    - export CCACHE_BASEDIR=${PWD}
    - export CCACHE_DIR=${PWD}/ccache
    - export PATH="/usr/lib/ccache:${PATH}"
    - ./make_deps.sh
    - rm -rf build && mkdir build && cd build
  script:
    - cmake -DPROFILE=ON -DCMAKE_INSTALL_PREFIX=/usr ..
    - make -j$(nproc)
    - make check
  except:
    - /^debian.*$/

#
# Test coverage
#
coverage:
  stage: coverage
  image: ubuntu:22.04
  script: 
    # Install coverage tools
    - DEBIAN_FRONTEND=noninteractive apt install -y --no-install-recommends lcov zip
    - ./make_deps.sh
    - rm -rf build && mkdir build
    - cmake -B build -DTEST_COVERAGE=ON
    - make -sC build -j$(nproc)
    - make -sC build check_coverage
    - zip -r coverage.zip build/coverage
  coverage: '/  lines......: \d+\.\d+/'
  artifacts:
    name: "splash_coverage_${CI_BUILD_REF_NAME}"
    paths:
    - "coverage.zip"
  only:
    - develop
    - master

#
# ┏━┓┏━┓┏━╸╻┏ ┏━┓┏━╸┏━╸
# ┣━┛┣━┫┃  ┣┻┓┣━┫┃╺┓┣╸ 
# ╹  ╹ ╹┗━╸╹ ╹╹ ╹┗━┛┗━╸
#
package:debian:22.04:
  stage: deploy
  image: ubuntu:22.04
  script:
    # Build package
    - ./make_deps.sh
    - rm -rf build && mkdir build && cd build
    - cmake -DBUILD_GENERIC_ARCH=ON -DWITH_LTO=ON -DCMAKE_INSTALL_PREFIX=/usr ..
    - make -j$(nproc)
    - make package
    - mv *.deb ../
  only:
    - tags
    - master
  artifacts:
    name: "splash_${CI_BUILD_REF_NAME}"
    paths:
      - "*.deb"
      - "*.tar.bz2"

package:debian:23.10:
  stage: deploy
  image: ubuntu:23.10
  script:
    # Build package
    - ./make_deps.sh
    - rm -rf build && mkdir build && cd build
    - cmake -DBUILD_GENERIC_ARCH=ON -DWITH_LTO=ON -DCMAKE_INSTALL_PREFIX=/usr ..
    - make -j$(nproc)
    - make package
    - mv *.deb ../
  only:
    - tags
    - master
  artifacts:
    name: "splash_${CI_BUILD_REF_NAME}"
    paths:
      - "*.deb"
      - "*.tar.bz2"

package:blender_addon:
  stage: deploy
  image: ubuntu:22.04
  before_script:
    - apt update -qq
    - DEBIAN_FRONTEND=noninteractive apt install -y git git-lfs zip cmake build-essential pkg-config

  script:
    # Build the Blender addon
    - rm -rf build && mkdir build && cd build
    - cmake -DBUILD_CODE=OFF ..
    - make blenderSplash
    - mv addons/blender/*.tar.bz2 ../
  only:
    - tags
    - master
  artifacts:
    name: "splash_blender_addon_${CI_BUILD_REF_NAME}"
    paths:
      - "*.tar.bz2"

package:fullsources:
  stage: deploy
  image: alpine
  before_script:
    - apk update && apk upgrade
  script:
    # This job packages the whole sources, including the submodules
    - tar cvzf splash.tar.gz --exclude='.git' --exclude='ccache' .
  only:
    - tags
  artifacts:
    paths:
      - splash.tar.gz

# Includes for MPA packaging
include:
  # - remote: 'https://gitlab.com/sat-mtl/metalab/distributions/mpa-bionic-arm64-jetson/-/raw/main/.gitlab-ci-package.yml'
  - remote: 'https://gitlab.com/sat-mtl/metalab/distributions/mpa-focal-amd64-nvidia/-/raw/main/.gitlab-ci-package.yml'
  - remote: 'https://gitlab.com/sat-mtl/metalab/distributions/mpa-focal-arm64-jetson/-/raw/main/.gitlab-ci-package.yml'
  - remote: 'https://gitlab.com/sat-mtl/metalab/distributions/mpa-jammy-amd64-nvidia/-/raw/main/.gitlab-ci-package.yml'

#
# ┏━┓╺┳╸┏━┓╺┳╸╻┏━╸   ┏━┓┏┓╻┏━┓╻  ╻ ╻┏━┓╻┏━┓
# ┗━┓ ┃ ┣━┫ ┃ ┃┃     ┣━┫┃┗┫┣━┫┃  ┗┳┛┗━┓┃┗━┓
# ┗━┛ ╹ ╹ ╹ ╹ ╹┗━╸   ╹ ╹╹ ╹╹ ╹┗━╸ ╹ ┗━┛╹┗━┛
#
static_analysis:
  stage: test
  image: ubuntu:22.04
  script:
    - git submodule update --init
    - ./make_deps.sh
    - rm -rf build && mkdir build && cd build
    - cmake -DBUILD_GENERIC_ARCH=ON -DCMAKE_INSTALL_PREFIX=/usr ..
    - wget https://scan.coverity.com/download/linux64 --post-data "token=zkRfEWYxyAeJDlYYg9Hkkg&project=paperManu%2Fsplash"
      -O coverity_tool.tgz
    - tar xvzf coverity_tool.tgz
    - $(ls | grep cov-analysis)/bin/cov-build --dir cov-int make -j$(nproc)
    - tar caf splash-cov.bz2 cov-int
    - curl --form token=zkRfEWYxyAeJDlYYg9Hkkg --form email=emmanueldurand@gmail.com --form file=@splash-cov.bz2
      --form description="Splash" https://scan.coverity.com/builds?project=paperManu%2Fsplash
    - DEBIAN_FRONTEND=noninteractive apt install -y --no-install-recommends libpcre3-dev cppcheck
    - make static_analysis
    - mv tests/static_analysis_result.txt ../
  only:
    - static_analysis
  artifacts:
    name: "splash_static_analysis_${CI_BUILD_REF_NAME}"
    paths:
    - "static_analysis_result.txt"

#
# ┏━╸╻╺┳╸╻  ┏━┓┏┓    ┏━┓┏━┓┏━╸┏━╸┏━┓
# ┃╺┓┃ ┃ ┃  ┣━┫┣┻┓   ┣━┛┣━┫┃╺┓┣╸ ┗━┓
# ┗━┛╹ ╹ ┗━╸╹ ╹┗━┛   ╹  ╹ ╹┗━┛┗━╸┗━┛
#
pages:
  stage: deploy
  image: ubuntu:22.04
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  script:
    # Here we build only the API doc, for testing purposes
    - DEBIAN_FRONTEND=noninteractive apt install -y --no-install-recommends doxygen
    - mkdir -p build && pushd build
    - cmake -DBUILD_CODE=OFF .. && make doc && cp -r docs/html ../public
  artifacts:
    paths:
      - public
  # only:
  #   - develop
