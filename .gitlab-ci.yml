variables:
  DOCKER_DRIVER: overlay2
  GIT_STRATEGY: clone
  GIT_SUBMODULE_STRATEGY: recursive
  TRACY_NO_INVARIANT_CHECK: 1

stages:
  - test
  - analysis
  - staging
  - package
  - deploy

cache:
  paths:
    - ccache/


#
# ┏━╸╻ ╻╺┳╸┏━╸┏┓╻┏━┓╻┏━┓┏┓╻┏━┓
# ┣╸ ┏╋┛ ┃ ┣╸ ┃┗┫┗━┓┃┃ ┃┃┗┫┗━┓
# ┗━╸╹ ╹ ╹ ┗━╸╹ ╹┗━┛╹┗━┛╹ ╹┗━┛
#
.amd64:
  tags:
    - amd64

.arm64:
  tags:
    - arm64

.ubuntu:
  before_script:
    - apt update -qq
    - DEBIAN_FRONTEND=noninteractive apt install -y --no-install-recommends ca-certificates
      ccache wget curl build-essential git-core libjsoncpp-dev zip cmake cmake-extras automake
      libtool libxcb-shm0-dev libxrandr-dev libxi-dev libgsl0-dev libatlas3-base libgphoto2-dev
      libxinerama-dev libxcursor-dev python3-dev portaudio19-dev yasm libgl1-mesa-dev
      libopencv-dev software-properties-common uuid-dev libavcodec-dev libavformat-dev
      libavutil-dev libswscale-dev libwayland-dev libxkbcommon-dev ninja-build
  
    # CCache stuff
    - mkdir -p ccache
    - export CCACHE_BASEDIR=${PWD}
    - export CCACHE_DIR=${PWD}/ccache
    - export PATH="/usr/lib/ccache:${PATH}"

#
# ╺┳╸┏━╸┏━┓╺┳╸┏━┓
#  ┃ ┣╸ ┗━┓ ┃ ┗━┓
#  ╹ ┗━╸┗━┛ ╹ ┗━┛
#
test:22.04:gcc-amd64-bundled-libs:
  stage: test
  extends:
    - .amd64
    - .ubuntu
  image: ubuntu:22.04
  script: 
    - ./make_deps.sh
    - rm -rf build && mkdir build
    - cmake -B build -DPROFILE=ON -DCMAKE_INSTALL_PREFIX=/usr
    - make -sC build -j$(nproc)
    - make check -sC build
    - ./build/src/splash --info
    - ./build/src/splash --child --prefix unittest local &
    - ./build/src/splash --doNotSpawn --prefix unittest ./data/share/splash/splash.json
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event' && $CI_COMMIT_BRANCH != '/^debian.*$/'

test:22.04:clang-amd64-system-libs:
  stage: test
  extends:
    - .amd64
    - .ubuntu
  image: ubuntu:22.04
  script: 
    # Test using Clang with system libs
    - DEBIAN_FRONTEND=noninteractive apt install -y --no-install-recommends libglm-dev
      libsnappy-dev libzmq3-dev clang
    - rm -rf build && mkdir build
    - CC=clang CXX=clang++ cmake -B build -DPROFILE=ON -DCMAKE_INSTALL_PREFIX=/usr -DUSE_SYSTEM_LIBS=ON
    - make -sC build -j$(nproc)
    - make check -sC build
    - ./build/src/splash --info
    - ./build/src/splash --child --prefix unittest local &
    - ./build/src/splash --doNotSpawn --prefix unittest ./data/share/splash/splash.json
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event' && $CI_COMMIT_BRANCH != '/^debian.*$/'

#
# ┏━┓┏┓╻┏━┓╻  ╻ ╻┏━┓╻┏━┓
# ┣━┫┃┗┫┣━┫┃  ┗┳┛┗━┓┃┗━┓
# ╹ ╹╹ ╹╹ ╹┗━╸ ╹ ┗━┛╹┗━┛
#
analysis:coverage:
  stage: analysis
  extends:
    - .amd64
    - .ubuntu
  image: ubuntu:22.04
  script: 
    - DEBIAN_FRONTEND=noninteractive apt install -y --no-install-recommends lcov zip
    - ./make_deps.sh
    - rm -rf build && mkdir build
    - cmake -B build -DTEST_COVERAGE=ON
    - make -sC build -j$(nproc)
    - make -sC build check_coverage
    - zip -r coverage.zip build/coverage
  coverage: '/  lines......: \d+\.\d+/'
  artifacts:
    name: "splash_coverage_${CI_BUILD_REF_NAME}"
    paths:
    - "coverage.zip"
    expire_in: 2 week
  rules:
    - if: $CI_COMMIT_BRANCH == 'develop'

analysis:static-analysis:
  stage: analysis
  extends:
    - .amd64
    - .ubuntu
  image: ubuntu:24.04
  script:
    - DEBIAN_FRONTEND=noninteractive apt install -y clang-tools
    - ./make_deps.sh
    - rm -rf build && mkdir build
    - scan-build cmake -B build -DCMAKE_BUILD_TYPE=Debug -DPROFILE=ON -DCMAKE_INSTALL_PREFIX=/usr
    - scan-build -o ./analysis make -sC build -j$(nproc)
  artifacts:
    name: "splash_${CI_BUILD_REF_NAME}_analysis"
    paths:
      - "analysis"
    expire_in: 2 week
  rules:
    - if: $CI_COMMIT_BRANCH == 'staging'


analysis:thread-sanitizer:
  stage: analysis
  extends:
    - .amd64
    - .ubuntu
  image: ubuntu:22.04
  allow_failure: true
  script:
    - DEBIAN_FRONTEND=noninteractive apt install -y clang
    - ./make_deps.sh
    - rm -rf build && mkdir build
    - CC=clang CXX=clang++ cmake -B build -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_FLAGS="-fsanitize=thread" -DPROFILE=ON -DCMAKE_INSTALL_PREFIX=/usr
    - make -sC build -j$(nproc)
    - make check -sC build
    - ./build/src/splash --info
    - ./build/src/splash --child --prefix unittest local &
    - ./build/src/splash --doNotSpawn --prefix unittest ./data/share/splash/splash.json
  rules:
    - if: $CI_COMMIT_BRANCH == 'staging'

analysis:address-sanitizer:
  stage: analysis
  extends:
    - .amd64
    - .ubuntu
  image: ubuntu:22.04
  allow_failure: true
  script:
    - DEBIAN_FRONTEND=noninteractive apt install -y clang
    - ./make_deps.sh
    - rm -rf build && mkdir build
    - CC=clang CXX=clang++ cmake -B build -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_FLAGS="-fsanitize=address" -DPROFILE=ON -DCMAKE_INSTALL_PREFIX=/usr
    - make -sC build -j$(nproc)
    - make check -sC build
    - ./build/src/splash --info
    - ./build/src/splash --child --prefix unittest local &
    - ./build/src/splash --doNotSpawn --prefix unittest ./data/share/splash/splash.json
  rules:
    - if: $CI_COMMIT_BRANCH == 'staging'

#
# ┏━┓╺┳╸┏━┓┏━╸╻┏┓╻┏━╸
# ┗━┓ ┃ ┣━┫┃╺┓┃┃┗┫┃╺┓
# ┗━┛ ╹ ╹ ╹┗━┛╹╹ ╹┗━┛
#
staging:22.04:gcc-arm64-bundled-libs:
  stage: staging
  extends:
    - .arm64
    - .ubuntu
  image: ubuntu:22.04
  allow_failure: true
  script: 
    - ./make_deps.sh
    - rm -rf build && mkdir build
    - cmake -B build -DCMAKE_BUILD_TYPE=Debug -DPROFILE=ON -DCMAKE_INSTALL_PREFIX=/usr
    - make -sC build -j$(nproc)
    - make check -sC build
    - make package -sC build
    - ./build/src/splash --info
    - ./build/src/splash --child --prefix unittest local &
    - ./build/src/splash --doNotSpawn --prefix unittest ./data/share/splash/splash.json
  rules:
    - if: $CI_COMMIT_BRANCH == 'staging'

staging:24.04:gcc-amd64-system-libs:
  stage: staging
  extends:
    - .amd64
    - .ubuntu
  image: ubuntu:24.04
  script: 
    - DEBIAN_FRONTEND=noninteractive apt install -y --no-install-recommends libglm-dev
      libsnappy-dev libzmq3-dev
    - rm -rf build && mkdir build
    - cmake -B build -DCMAKE_BUILD_TYPE=Debug -DPROFILE=ON -DWITH_SANITIZE=ON -DUSE_SYSTEM_LIBS=ON -DCMAKE_INSTALL_PREFIX=/usr
    - make -sC build -j$(nproc)
    - make check -sC build
    - make package -sC build
    - ./build/src/splash --info
    - ./build/src/splash --child --prefix unittest local &
    - ./build/src/splash --doNotSpawn --prefix unittest ./data/share/splash/splash.json
  rules:
    - if: $CI_COMMIT_BRANCH == 'staging'

staging:24.04:clang-amd64-system-libs:
  stage: staging
  extends:
    - .amd64
    - .ubuntu
  image: ubuntu:24.04
  script: 
    - DEBIAN_FRONTEND=noninteractive apt install -y --no-install-recommends libglm-dev
      libsnappy-dev libzmq3-dev clang
    - rm -rf build && mkdir build
    - CC=clang CXX=clang++ cmake -B build -DCMAKE_BUILD_TYPE=Debug -DPROFILE=ON -DUSE_SYSTEM_LIBS=ON -DCMAKE_INSTALL_PREFIX=/usr
    - make -sC build -j$(nproc)
    - make check -sC build
    - make package -sC build
    - ./build/src/splash --info
    - ./build/src/splash --child --prefix unittest local &
    - ./build/src/splash --doNotSpawn --prefix unittest ./data/share/splash/splash.json
  rules:
    - if: $CI_COMMIT_BRANCH == 'staging'
 
staging:fedora:gcc-amd64-system-bundled-libs:
  stage: staging
  extends:
    - .amd64
  image: fedora:latest
  allow_failure: true
  before_script:
    # We need a few additional dependencies from the RPM Fusion repository
    - dnf install --assumeyes https://mirrors.rpmfusion.org/free/fedora/rpmfusion-free-release-$(rpm -E %fedora).noarch.rpm
    - dnf update --assumeyes
    - dnf install --assumeyes gcc g++ cmake gsl-devel atlas-devel libgphoto2-devel python3-devel 
        yasm portaudio-devel python3-numpy opencv-devel jsoncpp-devel libuuid-devel libX11-devel
        libXrandr-devel libXinerama-devel libXcursor-devel libXi-devel mesa-libGL-devel ccache
        libavcodec-free-devel libavformat-free-devel libavutil-free-devel libswscale-free-devel
        libasan libubsan wayland-devel libxkbcommon-devel ninja-build
    - mkdir -p ccache
    - export CCACHE_BASEDIR=${PWD}
    - export CCACHE_DIR=${PWD}/ccache
    - export PATH="/usr/lib/ccache:${PATH}"
    - ./make_deps.sh
    - rm -rf build && mkdir build && cd build
  script:
    - cmake -DCMAKE_BUILD_TYPE=Debug -DPROFILE=ON -DWITH_SANITIZE=ON -DCMAKE_INSTALL_PREFIX=/usr ..
    - make -j$(nproc)
    - make check
  rules:
    - if: $CI_COMMIT_BRANCH == 'staging' || $CI_COMMIT_BRANCH == 'fedora'

staging:archlinux:gcc-amd64-bundled-libs:
  stage: staging
  extends:
    - .amd64
  image: archlinux:latest
  allow_failure: true
  before_script:
    - pacman -Syyu --noconfirm --disable-download-timeout
    - pacman -Sy --noconfirm --disable-download-timeout git cmake ninja gcc yasm pkgconfig
      libxi libxinerama libxrandr libxcursor jsoncpp mesa glm gsl libgphoto2 python3
      portaudio zip zlib ffmpeg opencv qt6-base vtk hdf5 glew libxkbcommon fmt make
    - mkdir -p ccache
    - export CCACHE_BASEDIR=${PWD}
    - export CCACHE_DIR=${PWD}/ccache
    - export PATH="/usr/lib/ccache:${PATH}"
    - ./make_deps.sh
    - rm -rf build && mkdir build && cd build
  script:
    - cmake -DCMAKE_BUILD_TYPE=Debug -DPROFILE=ON -DWITH_SANITIZE=ON -DCMAKE_INSTALL_PREFIX=/usr ..
    - make -j$(nproc)
    - make check
  rules:
    - if: $CI_COMMIT_BRANCH == 'staging' || $CI_COMMIT_BRANCH == 'archlinux'

staging:flatpak:
  # Note: to run flatpak-builder inside docker, it needs to be configured as privileged
  # in the Gitlab configuration file (usually in /etc/gitlab-runner/config.toml)
  stage: staging
  tags:
    - privileged
  image: ubuntu:22.04
  allow_failure: false
  before_script:
    - apt update -qq
    - DEBIAN_FRONTEND=noninteractive apt install -y flatpak-builder
    - flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
    - flatpak install -y flathub org.freedesktop.Platform//22.08 org.freedesktop.Sdk//22.08
  script:
    - rm -rf splash.tar.gz && touch splash.tar.gz
    - tar --exclude='.git' --exclude='ccache' --exclude='splash.tar.gz' -cvzf splash.tar.gz .
    - cd tests/packaging
    - flatpak-builder --ccache --repo=flatpak_repo build --force-clean xyz.splashmapper.Splash.json
    - flatpak build-bundle flatpak_repo splash.flatpak xyz.splashmapper.Splash
    - mv splash.flatpak ../../
  rules:
    - if: $CI_COMMIT_BRANCH == 'staging' || $CI_COMMIT_BRANCH == 'flatpak'
  artifacts:
    name: "splash-flatpak"
    paths:
      - "splash.flatpak"
    expire_in: 2 weeks

staging:windows:
  # Note: this job works on Windows with MSYS2 / MINGW64 already installed
  # See the README.md file or the manual compilation guide on the website
  # for more information
  stage: staging
  tags:
    - windows
  variables:
    MSYSTEM: 'UCRT64'
    CHERE_INVOKING: 'yes'
  script:
    - C:\msys64\usr\bin\bash -lc 'pacman -Syuu --noconfirm'
    - C:\msys64\usr\bin\bash -lc 'pacman -Syuu --noconfirm --needed zip git'
    - C:\msys64\usr\bin\bash -lc 'pacman -Syuu --noconfirm --needed mingw-w64-ucrt-x86_64-{cmake,make,gcc,yasm,pkgconf,jsoncpp,glm,gsl,python3,portaudio,zlib,ffmpeg,zeromq,cppzmq,snappy,opencv,gphoto2}'
    - C:\msys64\usr\bin\bash -lc 'bash -x ./tools/build_windows'
  artifacts:
    name: "splash_windows_installer"
    paths:
      - "splash-*-win64.exe"
    expire_in: 2 weeks
  rules:
    - if: $CI_COMMIT_BRANCH == 'staging'

#
# ┏━┓┏━┓┏━╸╻┏ ┏━┓┏━╸┏━╸
# ┣━┛┣━┫┃  ┣┻┓┣━┫┃╺┓┣╸ 
# ╹  ╹ ╹┗━╸╹ ╹╹ ╹┗━┛┗━╸
#
package:debian:22.04:
  stage: package
  extends:
    - .ubuntu
  image: ubuntu:22.04
  script:
    # Build package
    - ./make_deps.sh
    - rm -rf build && mkdir build && cd build
    - cmake -DBUILD_GENERIC_ARCH=ON -DWITH_LTO=ON -DCMAKE_INSTALL_PREFIX=/usr ..
    - make -j$(nproc)
    - make package
    - mv *.deb ../
  artifacts:
    name: "splash_${CI_BUILD_REF_NAME}"
    paths:
      - "*.deb"
      - "*.tar.bz2"
    expire_in: never
  rules:
    - if: $CI_COMMIT_TAG =~ /^\d+\.\d+\.\d+$/
    - if: $CI_COMMIT_BRANCH == 'master'

package:debian:24.04:
  stage: package
  extends:
    - .ubuntu
  image: ubuntu:24.04
  script:
    # Build package
    - ./make_deps.sh
    - rm -rf build && mkdir build && cd build
    - cmake -DBUILD_GENERIC_ARCH=ON -DWITH_LTO=ON -DCMAKE_INSTALL_PREFIX=/usr ..
    - make -j$(nproc)
    - make package
    - mv *.deb ../
  artifacts:
    name: "splash_${CI_BUILD_REF_NAME}"
    paths:
      - "*.deb"
      - "*.tar.bz2"
    expire_in: never
  rules:
    - if: $CI_COMMIT_TAG =~ /^\d+\.\d+\.\d+$/
    - if: $CI_COMMIT_BRANCH == 'master'

package:blender_addon:
  stage: package
  extends:
    - .ubuntu
  image: ubuntu:22.04
  before_script:
    - apt update -qq
    - DEBIAN_FRONTEND=noninteractive apt install -y git git-lfs zip cmake build-essential pkg-config
  script:
    # Build the Blender addon
    - rm -rf build && mkdir build && cd build
    - cmake -DBUILD_CODE=OFF ..
    - make blenderSplash
    - mv addons/blender/*.tar.bz2 ../
  artifacts:
    name: "splash_blender_addon_${CI_BUILD_REF_NAME}"
    paths:
      - "*.tar.bz2"
    expire_in: never
  rules:
    - if: $CI_COMMIT_TAG =~ /^\d+\.\d+\.\d+$/
    - if: $CI_COMMIT_BRANCH == 'master'

package:fullsources:
  stage: package
  image: alpine
  before_script:
    - apk update && apk upgrade
  script:
    # This job packages the whole sources, including the submodules
    - rm -rf splash.tar.gz && touch splash.tar.gz
    - tar --exclude='.git' --exclude='ccache' --exclude='splash.tar.gz' -cvzf splash.tar.gz .
  artifacts:
    paths:
      - splash.tar.gz
    expire_in: never
  rules:
    - if: $CI_COMMIT_TAG =~ /^\d+\.\d+\.\d+$/
    - if: $CI_COMMIT_BRANCH == 'master'

package:windows:
  # Note: this job works on Windows with MSYS2 / MINGW64 already installed
  # See the README.md file or the manual compilation guide on the website
  # for more information
  stage: package
  tags:
    - windows
  variables:
    MSYSTEM: 'UCRT64'
    CHERE_INVOKING: 'yes'
  script:
    - C:\msys64\usr\bin\bash -lc 'pacman -Syuu --noconfirm'
    - C:\msys64\usr\bin\bash -lc 'pacman -Syuu --noconfirm --needed zip git'
    - C:\msys64\usr\bin\bash -lc 'pacman -Syuu --noconfirm --needed mingw-w64-ucrt-x86_64-{cmake,make,gcc,yasm,pkgconf,jsoncpp,glm,gsl,python3,portaudio,zlib,ffmpeg,zeromq,cppzmq,snappy,opencv,gphoto2}'
    - C:\msys64\usr\bin\bash -lc 'bash -x ./tools/build_windows'
  artifacts:
    name: "splash_windows_installer"
    paths:
      - "splash-*-win64.exe"
    expire_in: never
  rules:
    - if: $CI_COMMIT_TAG =~ /^\d+\.\d+\.\d+$/
    - if: $CI_COMMIT_BRANCH == 'master'

#
# ╺┳┓┏━╸┏━┓╻  ┏━┓╻ ╻
#  ┃┃┣╸ ┣━┛┃  ┃ ┃┗┳┛
# ╺┻┛┗━╸╹  ┗━╸┗━┛ ╹ 
#
pages:
  stage: deploy
  extends:
    - .ubuntu
  image: ubuntu:22.04
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  script:
    # Here we build only the API doc, for testing purposes
    - DEBIAN_FRONTEND=noninteractive apt install -y --no-install-recommends doxygen
    - mkdir -p build && pushd build
    - cmake -DBUILD_CODE=OFF .. && make doc && cp -r docs/html ../public
  rules:
    - if: $CI_COMMIT_BRANCH == 'develop'
    - if: $CI_COMMIT_BRANCH == 'master'
  artifacts:
    paths:
      - public
    expire_in: 2 week
